[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Our Course Project",
    "section": "",
    "text": "I’m honored to be a member of the EMUTrend_Explorers project team.\nBelow, you’ll find a brief summary of our project. To access a detailed project description, please go to our lovely project .\nSummary\nAnalyzing Preference Patterns: A study on Industrial Engineering Programs in Ankara\nThis title represents a study examining preference patterns of Industrial Engineering Programs in Ankara.The project aims to analyze the impact of these programs on student preferences ,exploring trends in program preference and identifying potential influencing factors. Key focal points of the study may include preference rates, student motivation for program selection, notable features of the programs, and future expectations. The goal is to shed light on how industrial Engineering Programs in Ankara are perceived and chosen by students.\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Analytics Lab",
    "section": "",
    "text": "Hello! My name is Miray Elif Erdemli.\nThis is my personal webpage.\nPlease stay tuned to follow my works on data analytics, blog posts, and more…\n\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Question 1\n\nUsing the filters on https://m.imdb.com/search, list all Turkish movies with more than 2500 reviews, and save the URLs.\n\n\nurls &lt;- c( \"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&sort=moviemeter,asc&num_votes=2500,&country_of_origin=TR&count=250\",\n           \"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&sort=moviemeter,asc&num_votes=2500,&country_of_origin=TR&count=250\" )\n\nprint(urls)\n\n[1] \"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&sort=moviemeter,asc&num_votes=2500,&country_of_origin=TR&count=250\"\n[2] \"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&sort=moviemeter,asc&num_votes=2500,&country_of_origin=TR&count=250\"          \n\n\n\n\nQuestion 2\n\nStart web scrapping to create a Data Frame with columns: Title, Year, Duration, Rating, Votes\n\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.2\n\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(stringr)\nlibrary(rvest)\n\nWarning: package 'rvest' was built under R version 4.3.2\n\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nlibrary(ggplot2)\nlibrary(knitr)\n\nWarning: package 'knitr' was built under R version 4.3.2\n\nlibrary(reshape2)\n\nWarning: package 'reshape2' was built under R version 4.3.2\n\n\n\nAttaching package: 'reshape2'\n\nThe following object is masked from 'package:tidyr':\n\n    smiths\n\ndf &lt;- data.frame(titles = character(),\n                        years = numeric(),\n                        durations = character(),\n                        ratings = numeric(),\n                        votes = numeric())\n                    \n\ntitles &lt;- c()\nyears &lt;- c()\ndurations &lt;- c()\nratings &lt;- c()\nvotes &lt;- c()\n\nfor(url in urls){\n  html = read_html(url)\n  \ntitle &lt;- html %&gt;% html_nodes('.ipc-title__text')\ntitle &lt;- html_text(title)\ntitle &lt;- tail(head(title,-1),-1)\ntitle &lt;- str_split(title, \" \", n=2)\ntitle &lt;- unlist(lapply(title, function(x) {x[2]}))\n  \nyear &lt;- html %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")\nyear &lt;- html_text(year)\nyear &lt;- substr(year, 1, 4)\nyear &lt;- as.numeric(year)\n\nrating &lt;- html %&gt;% html_nodes(\".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating\")\nrating &lt;- html_text(rating)\nrating &lt;- substr(rating, 1, 3)\nrating &lt;- as.numeric(rating)\n\nvote &lt;- html %&gt;%\nhtml_node(\".sc-53c98e73-0.kRnqtn\") %&gt;%\n    html_text() %&gt;%\n    parse_number()\n\nduration &lt;- html %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")\n  duration &lt;- html_text(duration)\n  \n  hour &lt;- str_extract(duration, \"\\\\d+h\") %&gt;%\n    str_replace(\"h\", \"\") %&gt;%\n    as.numeric() %% 10\n  \n  total_duration &lt;- hour * 60 + str_extract(duration, \"\\\\d+m\") %&gt;%\n    str_replace(\"m\", \"\") %&gt;%\n    as.numeric()\n\n  \ntitles &lt;- append(titles,title)\nyears &lt;- append(years, year)\ndurations &lt;- append(durations, total_duration)\nratings &lt;- append(ratings, rating)\nvotes &lt;- append(votes, vote)\n  \n}\n\ndf &lt;- data.frame(titles, years, durations, ratings,votes)\nprint(head(df,10), caption= \"dataframe\")\n\n                      titles years durations ratings votes\n1          Kuru Otlar Üstüne  2023       197     8.1  5063\n2    Istanbul Için Son Çagri  2023        91     5.3 35018\n3   Yedinci Kogustaki Mucize  2019       132     8.2  5063\n4             Ölümlü Dünya 2  2023       117     7.5 35018\n5                     Bihter  2023       113     3.6  5063\n6               Ölümlü Dünya  2018       107     7.6 35018\n7                 Kis Uykusu  2014       196     8.0  5063\n8                     Dag II  2016       135     8.2 35018\n9             Do Not Disturb  2023       114     6.3  5063\n10 Ayla: The Daughter of War  2017       125     8.3 35018\n\n\n\n\nQuestion 3\n\n\nArrange your data frame in descending order by Rating. Present the top 5 and bottom 5 movies based on user ratings. Have you watched any of these movies? Do you agree or disagree with their current IMDb Ratings?\n\n\n\ndf &lt;- df[order(df$ratings, decreasing = TRUE),]\n\n\nTop 5 movies based on user user ratings\n\ntop5_movies &lt;- head(df, 5)\nprint(top5_movies)\n\n                          titles years durations ratings votes\n257               Hababam Sinifi  1975        87     9.2  5063\n39        CM101MMXI Fundamentals  2013       139     9.1  5063\n273                   Tosun Pasa  1976        90     8.9  5063\n337 Hababam Sinifi Sinifta Kaldi  1975        95     8.9  5063\n321                Süt Kardesler  1976        80     8.8  5063\n\n\nI cannot say that I agree with this list, which was created based on the points given by users. They are definitely enjoyable, entertaining and valuable movies. However, the events depicted in the films made by Yeşil Yeşil Çam are old and a bit exaggerated compared to today. I think there are better movies.\n\n\nBottom 5 movies based on user ratings.\n\nbottom5_movies &lt;- tail(df, 5)\nprint(bottom5_movies)\n\n                            titles years durations ratings votes\n189                 Cumali Ceber 2  2018       100     1.2  5063\n199                          Müjde  2022        NA     1.2  5063\n245              15/07 Safak Vakti  2021        95     1.2  5063\n101 Cumali Ceber: Allah Seni Alsin  2017       100     1.0  5063\n150                           Reis  2017       108     1.0 35018\n\n\nTo be honest, I haven’t watched any of the movies in this list. So I can say I have no idea.\n\nCheck the ratings of 2-3 of your favorite movies. What are their standings?\n\n####My favorite movies are : 1.Aşk Tesadüfleri Sever 2.Kelebeliğin Rüyası 3.İncir Reçeli\n[Aşk Tesadüfleri Sever]\n\nprint(df[df$titles == \"Ask Tesadüfleri Sever\",], caption = \"Aşk Tesadüfleri Sever\")\n\n                  titles years durations ratings votes\n89 Ask Tesadüfleri Sever  2011       118     7.2  5063\n\nsprintf(\"Rank of the *Aşk Tesadüfleri Sever* is %d\", which(df$titles==\"Ask Tesadüfleri Sever\"))\n\n[1] \"Rank of the *Aşk Tesadüfleri Sever* is 151\"\n\n\n[Kelebeğin Rüyası]\n\nprint(df[df$titles == \"Kelebegin Rüyasi\",], caption = \"Kelebeğin Rüyası\")\n\n             titles years durations ratings votes\n42 Kelebegin Rüyasi  2013       138     7.7 35018\n\nsprintf(\"Rank of the *Kelebeğin Rüyası* is %d\", which(df$titles==\"Kelebegin Rüyasi\"))\n\n[1] \"Rank of the *Kelebeğin Rüyası* is 67\"\n\n\n[İncir Reçeli]\n\nprint(df[df$titles == \"Incir Reçeli\",], caption = \"İncir Reçeli\")\n\n         titles years durations ratings votes\n63 Incir Reçeli  2011        94     6.5  5063\n\nsprintf(\"Rank of the *İncir Reçeli* is %d\", which(df$titles==\"Incir Reçeli\"))\n\n[1] \"Rank of the *İncir Reçeli* is 262\"\n\n\n\nScatter Plot\n\n\nyearly_rating &lt;- df %&gt;% group_by(years) %&gt;%\n  summarise(average_rating = mean(ratings))\nyearly_rating_scatter_plot &lt;- ggplot(yearly_rating, aes(x=years, y=average_rating)) + geom_point()\n\nprint(yearly_rating_scatter_plot)\n\n\n\n\nBox Plot\n\nyearly_rating_box_plot &lt;- ggplot(df, aes(x=years, y=ratings, group=years)) + geom_boxplot()\nprint(yearly_rating_box_plot)\n\n\n\n\nNumber of Movies\n\nyearly_movie_count &lt;- df %&gt;% group_by(years) %&gt;%\n  summarise(number_of_movies = n())\nyearly_count &lt;- ggplot(yearly_movie_count, aes(x=years, y=number_of_movies)) + geom_point()\nyearly_count\n\n\n\n\n\nCorrelation between Votes and Ratings.\n\n\ncorr_vote = cor(df$ratings, df$votes)\ncorr_vote\n\n[1] 0.0332948\n\n\n\nCorrelation between Duration and Ratings.\n\n\ncorr_duration= cor(df$durations, df$ratings)\ncorr_duration\n\n[1] NA\n\n\n\n\n\nQuestion 4\n\nurl = \"https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250\"\nname &lt;- c()\nyear &lt;- c()\n\nhtml = read_html(url)\n\ntitle &lt;- html %&gt;% html_nodes('.ipc-title__text')\ntitle &lt;- html_text(title)\ntitle &lt;- tail(head(title,-1),-1)\ntitle &lt;- str_split(title, \" \", n=2)\ntitle &lt;- unlist(lapply(title, function(x) {x[2]}))\n\nyear &lt;- html %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")\nyear &lt;- html_text(year)\nyear &lt;- substr(year, 1, 4)\nyear &lt;- as.numeric(year)\n\nname &lt;- append(name, title)\nyear &lt;- append(year, year)\ntop1000_df &lt;- data.frame(name, year)\nprint(top1000_df, caption = \"Turkish movies in IMDB Top1000 without rating, duration and votes\")\n\n                        name year\n1   Yedinci Kogustaki Mucize 2019\n2                 Kis Uykusu 2014\n3      Nefes: Vatan Sagolsun 2009\n4  Ayla: The Daughter of War 2017\n5             Babam ve Oglum 2005\n6                Ahlat Agaci 2018\n7    Bir Zamanlar Anadolu'da 2011\n8                     Eskiya 1996\n9                   G.O.R.A. 2004\n10                 Vizontele 2001\n11  Her Sey Çok Güzel Olacak 1998\n12  Yedinci Kogustaki Mucize 2019\n13                Kis Uykusu 2014\n14     Nefes: Vatan Sagolsun 2009\n15 Ayla: The Daughter of War 2017\n16            Babam ve Oglum 2005\n17               Ahlat Agaci 2018\n18   Bir Zamanlar Anadolu'da 2011\n19                    Eskiya 1996\n20                  G.O.R.A. 2004\n21                 Vizontele 2001\n22  Her Sey Çok Güzel Olacak 1998\n\n\nNew data frame with Turkish movies in the top 1000 containing only the title and year.\n\ntop1000_new_df&lt;- merge(x=top1000_df, y=df,\n                           by.x=c(\"name\", \"year\"),\n                           by.y=c(\"titles\", \"years\"), all.x=TRUE)\nprint(top1000_new_df, caption = \"Turkish movies in IMBD Top1000 with rating, duration and votes\")\n\n                        name year durations ratings votes\n1                Ahlat Agaci 2018       188     8.0 35018\n2                Ahlat Agaci 2018       188     8.0 35018\n3  Ayla: The Daughter of War 2017       125     8.3 35018\n4  Ayla: The Daughter of War 2017       125     8.3 35018\n5             Babam ve Oglum 2005       108     8.2 35018\n6             Babam ve Oglum 2005       108     8.2 35018\n7    Bir Zamanlar Anadolu'da 2011       157     7.8  5063\n8    Bir Zamanlar Anadolu'da 2011       157     7.8  5063\n9                     Eskiya 1996       128     8.1 35018\n10                    Eskiya 1996       128     8.1 35018\n11                  G.O.R.A. 2004       127     8.0 35018\n12                  G.O.R.A. 2004       127     8.0 35018\n13  Her Sey Çok Güzel Olacak 1998       107     8.1 35018\n14  Her Sey Çok Güzel Olacak 1998       107     8.1 35018\n15                Kis Uykusu 2014       196     8.0  5063\n16                Kis Uykusu 2014       196     8.0  5063\n17     Nefes: Vatan Sagolsun 2009       128     8.0  5063\n18     Nefes: Vatan Sagolsun 2009       128     8.0  5063\n19                 Vizontele 2001       110     8.0  5063\n20                 Vizontele 2001       110     8.0  5063\n21  Yedinci Kogustaki Mucize 2019       132     8.2  5063\n22  Yedinci Kogustaki Mucize 2019       132     8.2  5063\n\n\n\ntop1000_new_df &lt;- top1000_new_df[order(top1000_new_df$ratings, decreasing = TRUE),]\nprint(top1000_new_df, caption = \"Turkish movies in IMDB Top 1000 according to rankings.\")\n\n                        name year durations ratings votes\n3  Ayla: The Daughter of War 2017       125     8.3 35018\n4  Ayla: The Daughter of War 2017       125     8.3 35018\n5             Babam ve Oglum 2005       108     8.2 35018\n6             Babam ve Oglum 2005       108     8.2 35018\n21  Yedinci Kogustaki Mucize 2019       132     8.2  5063\n22  Yedinci Kogustaki Mucize 2019       132     8.2  5063\n9                     Eskiya 1996       128     8.1 35018\n10                    Eskiya 1996       128     8.1 35018\n13  Her Sey Çok Güzel Olacak 1998       107     8.1 35018\n14  Her Sey Çok Güzel Olacak 1998       107     8.1 35018\n1                Ahlat Agaci 2018       188     8.0 35018\n2                Ahlat Agaci 2018       188     8.0 35018\n11                  G.O.R.A. 2004       127     8.0 35018\n12                  G.O.R.A. 2004       127     8.0 35018\n15                Kis Uykusu 2014       196     8.0  5063\n16                Kis Uykusu 2014       196     8.0  5063\n17     Nefes: Vatan Sagolsun 2009       128     8.0  5063\n18     Nefes: Vatan Sagolsun 2009       128     8.0  5063\n19                 Vizontele 2001       110     8.0  5063\n20                 Vizontele 2001       110     8.0  5063\n7    Bir Zamanlar Anadolu'da 2011       157     7.8  5063\n8    Bir Zamanlar Anadolu'da 2011       157     7.8  5063\n\n\n\nprint(head(df,11), caption = \"Movies Dataframe\")\n\n                          titles years durations ratings votes\n257               Hababam Sinifi  1975        87     9.2  5063\n39        CM101MMXI Fundamentals  2013       139     9.1  5063\n273                   Tosun Pasa  1976        90     8.9  5063\n337 Hababam Sinifi Sinifta Kaldi  1975        95     8.9  5063\n321                Süt Kardesler  1976        80     8.8  5063\n284             Saban Oglu Saban  1977        90     8.7 35018\n307                   Zügürt Aga  1985       101     8.7  5063\n317                Neseli Günler  1978        95     8.7  5063\n323                  Kibar Feyzo  1978        83     8.7  5063\n380      Hababam Sinifi Uyaniyor  1976        94     8.7 35018\n343               Canim Kardesim  1973        85     8.6  5063\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "B.S., Industrial Engineering, Hacettepe University, Turkey, 2018 - ongoing.\nÜmitköy Anatolian High School, Turkey, 2017 - finished"
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nFirm xxx, position xx, year xxx\nFirm yyy, position yyy, year yyy"
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nTUSAŞ, Production Planning and Control Intern, 25/08/2023 - 22/09/2023\nROKETSAN, Production Planning and Scheduling Intern, 12/07/2023 - 22/08/2023"
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "My first assignment has three partss."
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the [term and year, e.g. Fall 2023] EMU 430 Data Analytics course.\nPlease use left menu to navigate through my assignments.\nThe most recent update to this page was made on October 25, 2023\n\n\n\n Back to top"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-1.html#a-literate-programming-with-jupyter-notebooks-and-quarto",
    "href": "assignments/assignment-1.html#a-literate-programming-with-jupyter-notebooks-and-quarto",
    "title": "Assignment 1",
    "section": "(a) Literate Programming With Jupyter Notebooks and Quarto",
    "text": "(a) Literate Programming With Jupyter Notebooks and Quarto\nclick the link\nJupyter Notebooks are important for code documentation, idea prototypes, and technical communication. However, it may open the way for package developers using traditional optimization tools to migrate with Notebooks. Nbdev is a framework that makes developing Python libraries easy within Jupyter Notebooks. In this talk, Hamel describes the integration of Nbdev and Quarto. This integration allows developers to create documentation right next to their code and automatically create a Quarto website. As a result, it offers seamless business analytics for documenting and testing software packages across Jupyter Notebooks.\n1"
  },
  {
    "objectID": "assignments/assignment-1.html#b-differences-between-r-and-python",
    "href": "assignments/assignment-1.html#b-differences-between-r-and-python",
    "title": "Assignment 1",
    "section": "(b) Differences Between R and Python",
    "text": "(b) Differences Between R and Python\n\n1. Assignment Operation\nThe R program uses the” &lt;- ” symbol to assign a value to a variable, create a new variable, or update the value of an existing variable.\nSome example of how to use the ” &lt;- ” symbol in R program:\n\n#Assign the value of the 1 to the variable 'apple'\napple &lt;- 1\n# Update the value of the variable 'apple' by adding to 4 to it \napple &lt;- apple + 4 \n# Print the value of 'apple'\nprint(apple)\n\n[1] 5\n\n\nThe Python program uses the ” = ” symbol to assign a value to a variable, create a new variable, or update the value of an existing variable.The R operator is more meaningful and easier than the Python operator. Additionally, the R operator is mathematically helpful in avoiding confusion.\nSome example of how to use the ” = ” symbol in Python program:\n\n#Assign the value of the 1 to the variable 'apple'\napple = 1\n# Update the value of the variable 'apple' by adding to 4 to it \napple +=  4 \n# Print the value of 'apple'\nprint(apple)\n\n5\n\n\n\n\n2. Square Root Operation\nBoth examples achieve the same goal of calculating the square roots of the elements in a list. The difference is in the syntax and the specific functions used in each language.\nSome example of how to use square root in R program:\n\n# Create a list with numeric elements\nmy_list &lt;- list(4, 9, 16, 25)\n\n# Use sapply to calculate the square roots\nsquare_roots &lt;- sapply(my_list, function(x) sqrt(x))\n\n# Print the results\n(square_roots)\n\n[1] 2 3 4 5\n\n\nSome example of how to use square root in Python program:\n\nimport math\n\n# Calculate the square root of 16\nsquare_root = math.sqrt(16)\n\n# Print the result\nprint(square_root)\n\n4.0\n\n\n\n\n3. Indexing\nIn R, the indexing starts from 1. This code takes the 3rd, 4th, and 5th elements. The expected output is c d e. Unlike Python, R uses single-base indexing. This means the first element is at position 1. Additionally, R’s slicing syntax includes both start and end indices. So “[3:5]” contains elements at indices 3, 4 and 5.\nSome example of how to use indexing in R program:\n\n# Create a vector\ncurrentline &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\n\n# Perform slicing on the vector\nslice &lt;- currentline[3:5]\n\nslice\n\n[1] \"c\" \"d\" \"e\"\n\n\nIn Python, the indexing starts from 0. This code takes the 4th and 5th characters (i.e., characters at indices 3 and 4) from the currentline string and prints them. The expected output is ” lo ”\nSome example of how to use indexing in Python program:\n\n# Create a string\n\ncurrentline = \"Hello World!\"\n\n# Perform slicing on the string\nslice = currentline[3:5]\n\n# Print the results\nslice\n\n'lo'"
  },
  {
    "objectID": "assignments/assignment-1.html#c",
    "href": "assignments/assignment-1.html#c",
    "title": "Assignment 1",
    "section": "(c)",
    "text": "(c)\n\nlibrary(dslabs)\n\n# Import the na_example data set\ndata(\"na_example\")\n\n# Print the na_example data set\nna_example\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n\n\n# Count the total number of NA values\nsum(is.na(na_example))\n\n[1] 145\n\n\n\n#Replace all n replace all NA values in the 0\n\nna_example_new &lt;- na_example\nna_example_new[is.na(na_example)] &lt;- 0\n\n# Print the na_example_new\nna_example_new\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\n\n\n# Count the total number of NA values in the new data frame\nsum(is.na(na_example_new))\n\n[1] 0\n\n\n2"
  },
  {
    "objectID": "assignments/assignment-1.html#footnotes",
    "href": "assignments/assignment-1.html#footnotes",
    "title": "Assignment 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis content was generated by AI in response to the prompt “Could you give a brief summary of↩︎\nThis code was generated by AI, in response to the prompt “count NA values in R as code”↩︎"
  }
]