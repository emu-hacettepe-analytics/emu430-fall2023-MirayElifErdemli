# View the content of the data set
na_example
# View the content of the data set
na_example
library(dslabs)
library(dslabs)
library(dslabs)
install.packages("dslabs")
library(dslabs)
# Import the "na_example" data set
na_example <- dslabs::na_example
# View the content of the data set
na_example
library(dslabs)
# Import the na_example data set
data("na_example")
# Print the na_example data set
print(na_example)
library(dslabs)
# Import the na_example data set
data("na_example")
# Print the na_example data set
print(na_example)
library(dslabs)
# Import the na_example data set
data("na_example")
# Print the na_example data set
print(na_example)
head(na_example)
reticulate::repl_python()
library(dslabs)
# Import the na_example data set
data("na_example")
# Print the na_example data set
na_example
# Count the total number of NA values
sum(is.na(na_example))
#Replace all n replace all NA values in the 0
na_example_new <- na_example
na_example_new[is.na(na_example)] <- 0
# Print the na_example_new
na_example_new
# Count the total number of NA values in the new data frame
sum(is.na((na_example_new))
library(dslabs)
library(dslabs)
# Import the na_example data set
data("na_example")
# Print the na_example data set
na_example
# Count the total number of NA values
sum(is.na(na_example))
#Replace all n replace all NA values in the 0
na_example_new <- na_example
na_example_new[is.na(na_example)] <- 0
# Print the na_example_new
na_example_new
# Count the total number of NA values in the new data frame
sum(is.na(na_example_new))
# Create a vector of numbers
k <- c(1, 2, 3, 4, 5)
# Create a data frame from vectors
df <- data.frame(name = c("Tesla", "Rosie", "Mark"), age = c(8, 12, 15),)
# Create a vector of numbers
k <- c(1, 2, 3, 4, 5)
# Create a data frame from vectors
df <- data.frame(name = c("Tesla", "Rosie", "Mark"), age = c(8, 12, 15))
# Print the data frame
df
reticulate::repl_python()
reticulate::repl_python()
#Assign the value of the 1 to the variable 'apple'
apple = 1
# Update the value of the variable 'apple' by adding to 4 to it
apple += apple + 4
# Print the value of 'apple'
print(apple)
#Assign the value of the 1 to the variable 'apple'
apple = 1
# Update the value of the variable 'apple' by adding to 4 to it
apple +=  4
# Print the value of 'apple'
print(apple)
quit
#Assign the value of the 1 to the variable 'apple'
apple <- 1
# Update the value of the variable 'apple' by adding to 4 to it
apple <- apple + 4
# Print the value of 'apple'
print(apple)
library(dslabs)
# Import the na_example data set
data("na_example")
# Print the na_example data set
na_example
# Count the total number of NA values
sum(is.na(na_example))
#Replace all n replace all NA values in the 0
na_example_new <- na_example
na_example_new[is.na(na_example)] <- 0
# Print the na_example_new
na_example_new
# Count the total number of NA values in the new data frame
sum(is.na(na_example_new))
reticulate::repl_python()
# Create a vector of numbers
import numpy as np
k = np.array([1, 2, 3, 4, 5])
# Create a data frame from vectors
import pandas as pd
data = {'name': ["Tesla", "Rosie", "Mark"], 'age': [8, 12, 15]}
df = pd.DataFrame(data)
# Print data frame
print(df)
quit
reticulate::repl_python()
# Create a vector of numbers
import numpy as np
k = np.array([1, 2, 3, 4, 5])
# Create a data frame from vectors
import pandas as pd
data = {'name': ["Tesla", "Rosie", "Mark"], 'age': [8, 12, 15]}
df = pd.DataFrame(data)
# Print data frame
print(df)
quit
reticulate::repl_python()
# Create a vector of numbers
import numpy as np
k = np.array([1, 2, 3, 4, 5])
quit
reticulate::repl_python()
my_list = [1, 2, 3, 4, 5]
# Print the third element of the list
print(my_list[2])
quit
# Create a list with numeric elements
my_list <- list(4, 9, 16, 25)
# Use sapply to calculate the square roots
square_roots <- sapply(my_list, function(x) sqrt(x))
# Print the results
(square_roots)
reticulate::repl_python()
# Create a list with numeric elements
my_list = [4, 9, 16, 25]
# Calculate the square roots using a list comprehension
square_roots = [sqrt(x) for x in my_list]
# Import the math module to use the sqrt function
from math import sqrt
# Print the results
print(square_roots)
quit
reticulate::repl_python()
# Create a list with numeric elements
my_list = [4, 9, 16, 25]
# Calculate the square roots using a list comprehension
square_roots = [sqrt(x) for x in my_list]
# Import the math module to use the sqrt function
from math import sqrt
# Print the results
print(square_roots)
quit
# Create a list with numeric elements
my_list <- list(4, 9, 16, 25)
# Use sapply to calculate the square roots
square_roots <- sapply(my_list, sqrt(x))
# Create a list with numeric elements
my_list <- list(4, 9, 16, 25)
# Use sapply to calculate the square roots
square_roots <- sapply(my_list, function(x), sqrt(x))
# Create a list with numeric elements
my_list <- list(4, 9, 16, 25)
# Use sapply to calculate the square roots
square_roots <- sapply(my_list, function(x) sqrt(x))
# Print the results
(square_roots)
# Create a list with numeric elements
my_list <- list(4, 9, 16, 25)
# Use sapply to calculate the square roots
square_roots <- sapply(my_list, function(x) sqrt(x))
# Print the results
(square_roots)
# Create a string
currentline = "Hello World!"
# Perform slicing on the string
slice = currentline[3:5]
# Print the results
slice
# Create a string
currentline = "Hello World!"
# Perform slicing on the string
slice = currentline[3:5]
# Print the results
slice
# Create a string
currentline = "Hello World!"
# Perform slicing on the string
slice = currentline[3:5]
# Print the results
slice
# Create a string
currentline = "Hello World!"
# Perform slicing on the string
slice = currentline[3:5]
# Print the results
slice
reticulate::repl_python()
# Create a string
currentline = "Hello World!"
# Perform slicing on the string
slice = currentline[3:5]
# Print the results
slice
quit
# Create a vector
currentline <- c("a", "b", "c", "d", "e", "f", "g")
# Perform slicing on the vector
slice <- currentline[3:5]
print(slice)
library(dslabs)
# Import the na_example data set
data("na_example")
# Print the na_example data set
na_example
# Count the total number of NA values
sum(is.na(na_example))
#Replace all n replace all NA values in the 0
na_example_new <- na_example
na_example_new[is.na(na_example)] <- 0
# Print the na_example_new
na_example_new
# Count the total number of NA values in the new data frame
sum(is.na(na_example_new))
library(dslabs)
# Import the na_example data set
data("na_example")
# Print the na_example data set
na_example
# Count the total number of NA values
sum(is.na(na_example))
#Replace all n replace all NA values in the 0
na_example_new <- na_example
na_example_new[is.na(na_example)] <- 0
# Print the na_example_new
na_example_new
# Count the total number of NA values in the new data frame
sum(is.na(na_example_new))
# Count the total number of NA values
sum(is.na(na_example))
#Replace all n replace all NA values in the 0
na_example_new <- na_example
na_example_new[is.na(na_example)] <- 0
# Print the na_example_new
na_example_new
reticulate::repl_python()
# Create a string
currentline = "Hello World!"
# Perform slicing on the string
slice = currentline[3:5]
# Print the results
slice
# Create a string
currentline = "Hello World!"
# Perform slicing on the string
slice = currentline[3:5]
# Print the results
slice
quit
library(dslabs)
# Import the na_example data set
data("na_example")
# Print the na_example data set
na_example
# Count the total number of NA values
sum(is.na(na_example))
#Replace all n replace all NA values in the 0
na_example_new <- na_example
na_example_new[is.na(na_example)] <- 0
# Print the na_example_new
na_example_new
# Count the total number of NA values in the new data frame
sum(is.na(na_example_new))
# Count the total number of NA values
sum(is.na(na_example))
# Create a vector
currentline <- c("a", "b", "c", "d", "e", "f", "g")
# Perform slicing on the vector
slice <- currentline[3:5]
slice
