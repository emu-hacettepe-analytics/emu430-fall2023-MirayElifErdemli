---
title: "Assignment 1"
---

# Assignment 1


My first assignment has three parts.

## (a)









## (b)

### Differences Between R and Python 

#### ** 1. Assignment Operation **


The R program uses the" <- " symbol to assign a value to a variable, create a new variable, or update the value of an existing variable.

Some example of how to use the " <- " symbol in R program:

```{r}
#Assign the value of the 1 to the variable 'apple'
apple <- 1
# Update the value of the variable 'apple' by adding to 4 to it 
apple <- apple + 4 
# Print the value of 'apple'
print(apple)
```

The Python program uses the " = "symbol to assign a value to a variable, create a new variable, or update the value of an existing variable.The R operator is more meaningful and easier than the Python operator. Additionally, the R operator is mathematically helpful in avoiding confusion.

Some example of how to use the " = "symbol in Python program:

```{python}
#Assign the value of the 1 to the variable 'apple'
apple = 1
# Update the value of the variable 'apple' by adding to 4 to it 
apple +=  4 
# Print the value of 'apple'
print(apple)
```

#### ** 2. Square Root Operation in List **

Both examples achieve the same goal of calculating the square roots of the elements in a list. The difference is in the syntax and the specific functions used in each language.

Some example of how to use square root in R program:

```{r}

# Create a list with numeric elements
my_list <- list(4, 9, 16, 25)

# Use sapply to calculate the square roots
square_roots <- sapply(my_list, function(x) sqrt(x))

# Print the results
(square_roots)

```

Some example of how to use square root in Python program:

``` {python}

# Create a list with numeric elements
my_list = [4, 9, 16, 25]

# Calculate the square roots using a list comprehension
square_roots = [sqrt(x) for x in my_list]

# Import the math module to use the sqrt function
from math import sqrt

# Print the results
print(square_roots)

```

#### ** 3. Indexing **

In R, the indexing starts from 1. This code takes the 3rd, 4th, and 5th elements. The expected output is c d e. Unlike Python, R uses single-base indexing. This means the first element is at position 1. Additionally, R's slicing syntax includes both start and end indices. So "[3:5]" contains elements at indices 3, 4 and 5.


Some example of how to use indexing in R program:

``` {r}

# Create a vector
currentline <- c("a", "b", "c", "d", "e", "f", "g")

# Perform slicing on the vector
slice <- currentline[3:5]

slice

```
In Python, the indexing starts from 0. This code takes the 4th and 5th characters (i.e., characters at indices 3 and 4) from the currentline string and prints them. The expected output is lo.

Some example of how to use indexing in Python program:

``` {python}

# Create a string

currentline = "Hello World!"

# Perform slicing on the string
slice = currentline[3:5]

# Print the results
slice


```

## (c)


``` {r}
library(dslabs)

# Import the na_example data set
data("na_example")

# Print the na_example data set
na_example

```


``` {r}
# Count the total number of NA values
sum(is.na(na_example))

````

```` {r}
#Replace all n replace all NA values in the 0

na_example_new <- na_example
na_example_new[is.na(na_example)] <- 0

# Print the na_example_new
na_example_new

```

``` {r}
# Count the total number of NA values in the new data frame
sum(is.na(na_example_new))


```

